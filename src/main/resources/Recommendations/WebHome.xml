<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>Recommendations</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Main.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1430927888000</creationDate>
  <date>1431509896000</date>
  <contentUpdateDate>1431507551000</contentUpdateDate>
  <version>1.1</version>
  <title>WebHome</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
import groovy.json.*

def recConfigDoc = xwiki.getDocument('RecommendationsCode.RecEngineConfig');
def easyrecAddress = recConfigDoc.get('easyrecServerAddress');
def easyrecApiKey = recConfigDoc.get('easyrecApiKey');
def easyrecTenantId = recConfigDoc.get('easyrecTenantId');
def recommendHidden = recConfigDoc.get('recommendHidden');
if(easyrecAddress.isEmpty() || easyrecApiKey.isEmpty() || easyrecTenantId.isEmpty()) {
  println "You have to set up an easyrec server in order to use this extension";
}
else {
  def recommendationType = 1;
  if(request.get('type')) {
    recommendationType = (request.get('type')).toInteger();
  }
  def queryURL = "";
  /* 
  Type 1 : recommendations for user
  Type 2 : other users also viewed ...
  Type 3 : related items | edited_together ...
  Type 4 : related items | profile (content-based) ...
  */
  if(recommendationType == 2) {
    queryURL = easyrecAddress+'api/1.0/json/otherusersalsoviewed?apikey='+easyrecApiKey+'&amp;tenantid='+easyrecTenantId+'&amp;itemid='+doc.getFullName();
  }
  else if(recommendationType == 3) {
    queryURL = easyrecAddress+'api/1.0/json/relateditems?assoctype=EDITED_TOGETHER&amp;apikey='+easyrecApiKey+'&amp;tenantid='+easyrecTenantId+'&amp;itemid='+doc.getFullName();
  }
  else if(recommendationType == 4) {
    queryURL = easyrecAddress+'api/1.0/json/relateditems?assoctype=PROFILE_SIMILARITY&amp;apikey='+easyrecApiKey+'&amp;tenantid='+easyrecTenantId+'&amp;itemid='+doc.getFullName();
  }
  else {
    queryURL = easyrecAddress+'api/1.0/json/recommendationsforuser?apikey='+easyrecApiKey+'&amp;tenantid='+easyrecTenantId+'&amp;userid='+xcontext.getUser();
  }
  def userRec = xwiki.getURLContent(queryURL);
  def jsonSlurper = new JsonSlurper();
  def userRecObject = jsonSlurper.parseText(userRec);
  def recommendations = ""
  if(userRecObject.recommendeditems == null) {
    recommendations = userRecObject.recommendedItems;
  }
  else {
    recommendations = userRecObject.recommendeditems.item;
  }

  if(userRecObject.recommendeditems != null || userRecObject.recommendedItems != null) {
    if(recommendations instanceof Collection) {
      def i = 1;
      recommendations.each() {
        def pageRecName = xwiki.getDocument(it.id);
        if(pageRecName &amp;&amp; !pageRecName.isNew() &amp;&amp; (!pageRecName.isHidden() || recommendHidden) &amp;&amp; i&lt;=5) {
          println "[[${it.id}]]";
          i++;
        }
      };
    }
    else {
      def pageRecName = xwiki.getDocument(recommendations.id);
      if(pageRecName &amp;&amp; !pageRecName.isNew() &amp;&amp; (!pageRecName.isHidden() || recommendHidden)) {
        println "[[${recommendations.id}]]";
      }
    }
  }
  else if(userRecObject.error != null &amp;&amp; !userRecObject.error.isEmpty()) {
    println "//Your recommendation engine configuration is not working!//"
  }
  else {
    println "//No recommendation for you//"
  }
}
{{/groovy}}</content>
</xwikidoc>
