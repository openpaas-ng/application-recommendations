<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>RecommendationsCode</web>
  <name>ProfilesListener</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>RecommendationsCode.Pushscript</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1432193470000</creationDate>
  <date>1432217563000</date>
  <contentUpdateDate>1432217563000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
import org.xwiki.observation.*
import org.xwiki.observation.event.*
import org.xwiki.bridge.event.*
import org.xwiki.model.reference.*
import org.xwiki.model.*
import com.xpn.xwiki.web.*
import com.xpn.xwiki.*

class RecommendationsProfilesEventListener implements EventListener
{
  def pushReference = new EntityReference("Pushscript", EntityType.DOCUMENT, 
    new EntityReference("RecommendationsCode", EntityType.SPACE))

  String getName()
  {
    // The unique name of this event listener
    return "profiles"
  }

  List&lt;Event&gt; getEvents()
  {
    // The list of events this listener listens to
    return [new DocumentCreatedEvent(), new DocumentUpdatedEvent()]
  }

  // Called by the Observation Manager when an event matches the list of events returned by getEvents()
  void onEvent(Event event, Object source, Object context)
  {
    System.out.println("PROFILE LISTENER: Start sending profile for "+source.fullName)
    try {
      def xwiki = context.getWiki()
      def configReference = new EntityReference("RecEngineConfig", EntityType.DOCUMENT, 
        new EntityReference("RecommendationsCode", EntityType.SPACE))
      // Prevent sending profiles for blacklisted spaces
      def blacklistedSpaces = xwiki.getDocument(configReference , context).getObject('RecommendationsCode.RecEngineConfigClass').get('blacklistedSpaces').value
      if (!blacklistedSpaces.contains(source.space)) {
        def pushDoc = xwiki.getDocument(pushReference, context)
        def pushURL = pushDoc.getExternalURL('view', 'doc='+source.fullName, context)
        def sendProfile = xwiki.getURLContent(pushURL, context)
        System.out.println("PROFILE LISTENER: Profile sent")
      }
      else {
        System.out.println("PROFILE LISTENER: Blacklisted space, profile won't be sent to the recommendation engine")
      }
    } catch (Exception e) {
      System.out.println("PROFILE LISTENER: Exception "+e)
    }
  }
}

// Register against the Observation Manager
def observation = Utils.getComponent(ObservationManager.class)
observation.removeListener("profiles")
def listener = new RecommendationsProfilesEventListener()
observation.addListener(listener)
{{/groovy}}</content>
</xwikidoc>
